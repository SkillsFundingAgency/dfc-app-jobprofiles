// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DFC.App.ExploreCareers.UI.FunctionalTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ExploreCareersCUIFeature : object, Xunit.IClassFixture<ExploreCareersCUIFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ExploreCareersCUI.feature"
#line hidden
        
        public ExploreCareersCUIFeature(ExploreCareersCUIFeature.FixtureData fixtureData, DFC_App_ExploreCareers_UI_FunctionalTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "Features", "ExploreCareersCUI", "\tAs a citizen on the National Careers website \r\n\tI want to view and search job pr" +
                    "ofiles information for a particular job category", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        public virtual void JobCategoryLinksVerification(string jobCategory, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Job category", jobCategory);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Job category links verification", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("I am at the \"Explore careers\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When(string.Format("I click on the {0} link", jobCategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then(string.Format("I am taken to the {0} page", jobCategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Administration")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Administration")]
        public virtual void JobCategoryLinksVerification_Administration()
        {
#line 5
this.JobCategoryLinksVerification("Administration", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Animal care")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Animal care")]
        public virtual void JobCategoryLinksVerification_AnimalCare()
        {
#line 5
this.JobCategoryLinksVerification("Animal care", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Business and finance")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Business and finance")]
        public virtual void JobCategoryLinksVerification_BusinessAndFinance()
        {
#line 5
this.JobCategoryLinksVerification("Business and finance", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Computing, technology and digital")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Computing, technology and digital")]
        public virtual void JobCategoryLinksVerification_ComputingTechnologyAndDigital()
        {
#line 5
this.JobCategoryLinksVerification("Computing, technology and digital", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Emergency and uniform services")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Emergency and uniform services")]
        public virtual void JobCategoryLinksVerification_EmergencyAndUniformServices()
        {
#line 5
this.JobCategoryLinksVerification("Emergency and uniform services", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Law and legal")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Law and legal")]
        public virtual void JobCategoryLinksVerification_LawAndLegal()
        {
#line 5
this.JobCategoryLinksVerification("Law and legal", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Manufacturing")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Manufacturing")]
        public virtual void JobCategoryLinksVerification_Manufacturing()
        {
#line 5
this.JobCategoryLinksVerification("Manufacturing", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Science and research")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Science and research")]
        public virtual void JobCategoryLinksVerification_ScienceAndResearch()
        {
#line 5
this.JobCategoryLinksVerification("Science and research", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Transport")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Transport")]
        public virtual void JobCategoryLinksVerification_Transport()
        {
#line 5
this.JobCategoryLinksVerification("Transport", ((string[])(null)));
#line hidden
        }
        
        public virtual void SearchFieldAutosuggestFieldPopulation(string page, string searchTerm, string autoSuggestOption, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("page", page);
            argumentsOfScenario.Add("search term", searchTerm);
            argumentsOfScenario.Add("auto suggest option", autoSuggestOption);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search field autosuggest field population", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
 testRunner.Given(string.Format("I navigate to the {0} page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
 testRunner.When(string.Format("I enter the search term {0} in the search field", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
 testRunner.Then(string.Format("I am able to select {0} from the resultant auto suggest", autoSuggestOption), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.And(string.Format("{0} is populated in the search field", autoSuggestOption), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 0")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 0")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant0()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Explore careers", "nur", "Nursing associate", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 1")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 1")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant1()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Explore careers", "pi", "Aircraft pilot", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 2")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 2")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant2()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Explore careers", "la", "Lawyer", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 3")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 3")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant3()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Job profiles", "nur", "Nursing associate", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 4")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 4")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant4()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Job profiles", "pi", "Aircraft pilot", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 5")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 5")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant5()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Job profiles", "la", "Lawyer", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 6")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 6")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant6()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Search results", "nur", "Nursing associate", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 7")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 7")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant7()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Search results", "pi", "Aircraft pilot", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 8")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 8")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant8()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Search results", "la", "Lawyer", ((string[])(null)));
#line hidden
        }
        
        public virtual void SearchTermNotFound(string page, string searchTerm, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("page", page);
            argumentsOfScenario.Add("search term", searchTerm);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search term not found", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 39
 testRunner.Given(string.Format("I navigate to the {0} page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
 testRunner.When(string.Format("I enter the non existent search term {0} in the search field", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
 testRunner.And("I click the search button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.Then("I get the message \"0 results found - try again using a different job title\" in th" +
                        "e search results page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search term not found: Explore careers")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search term not found: Explore careers")]
        public virtual void SearchTermNotFound_ExploreCareers()
        {
#line 38
this.SearchTermNotFound("Explore careers", "aaa", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search term not found: Job profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search term not found: Job profiles")]
        public virtual void SearchTermNotFound_JobProfiles()
        {
#line 38
this.SearchTermNotFound("Job profiles", "sss", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search term not found: Search results")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search term not found: Search results")]
        public virtual void SearchTermNotFound_SearchResults()
        {
#line 38
this.SearchTermNotFound("Search results", "zzz", ((string[])(null)));
#line hidden
        }
        
        public virtual void AutoSuggestingSearchTermsOnSearchTermMisspelling(string page, string searchTerm, string suggestedSearchTerm, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("page", page);
            argumentsOfScenario.Add("search term", searchTerm);
            argumentsOfScenario.Add("suggested search term", suggestedSearchTerm);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Auto suggesting search terms on search term misspelling", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 50
 testRunner.Given(string.Format("I navigate to the {0} page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
 testRunner.When(string.Format("I enter the search term {0} in the search field", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.And("I click the search button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.Then(string.Format("I am taken to the search results page with the message Did you mean {0} displayed" +
                            "", suggestedSearchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.And("the message \"0 results found - try again using a different job title\" displayed b" +
                        "elow it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Auto suggesting search terms on search term misspelling: Explore careers")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Auto suggesting search terms on search term misspelling: Explore careers")]
        public virtual void AutoSuggestingSearchTermsOnSearchTermMisspelling_ExploreCareers()
        {
#line 49
this.AutoSuggestingSearchTermsOnSearchTermMisspelling("Explore careers", "nuurse", "nurse", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Auto suggesting search terms on search term misspelling: Job profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Auto suggesting search terms on search term misspelling: Job profiles")]
        public virtual void AutoSuggestingSearchTermsOnSearchTermMisspelling_JobProfiles()
        {
#line 49
this.AutoSuggestingSearchTermsOnSearchTermMisspelling("Job profiles", "lawwwyer", "lawyer", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Auto suggesting search terms on search term misspelling: Search results")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Auto suggesting search terms on search term misspelling: Search results")]
        public virtual void AutoSuggestingSearchTermsOnSearchTermMisspelling_SearchResults()
        {
#line 49
this.AutoSuggestingSearchTermsOnSearchTermMisspelling("Search results", "phlebotomizzzt", "phlebotomist", ((string[])(null)));
#line hidden
        }
        
        public virtual void MisspeltSearchTermsAutoSuggestionLinkVerification(string page, string searchTerm, string suggestedSearchTerm, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("page", page);
            argumentsOfScenario.Add("search term", searchTerm);
            argumentsOfScenario.Add("suggested search term", suggestedSearchTerm);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Misspelt search terms auto suggestion link verification", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 62
 testRunner.Given(string.Format("I navigate to the {0} page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 63
 testRunner.And(string.Format("I enter the search term {0} in the search field", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And("I click the search button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
 testRunner.And(string.Format("I am taken to the search results page with the message Did you mean {0} displayed" +
                            "", suggestedSearchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
 testRunner.When("I click the link in the message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.Then(string.Format("the url bears the suggested search term {0} as its parameter", suggestedSearchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Misspelt search terms auto suggestion link verification: Variant 0")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Misspelt search terms auto suggestion link verification: Variant 0")]
        public virtual void MisspeltSearchTermsAutoSuggestionLinkVerification_Variant0()
        {
#line 61
this.MisspeltSearchTermsAutoSuggestionLinkVerification("Explore careers", "nuurse", "nurse", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Misspelt search terms auto suggestion link verification: Variant 1")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Misspelt search terms auto suggestion link verification: Variant 1")]
        public virtual void MisspeltSearchTermsAutoSuggestionLinkVerification_Variant1()
        {
#line 61
this.MisspeltSearchTermsAutoSuggestionLinkVerification("Explore careers", "lawwwyer", "lawyer", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Misspelt search terms auto suggestion link verification: Variant 2")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Misspelt search terms auto suggestion link verification: Variant 2")]
        public virtual void MisspeltSearchTermsAutoSuggestionLinkVerification_Variant2()
        {
#line 61
this.MisspeltSearchTermsAutoSuggestionLinkVerification("Search results", "mechannic", "mechanic", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Misspelt search terms auto suggestion link verification: Variant 3")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Misspelt search terms auto suggestion link verification: Variant 3")]
        public virtual void MisspeltSearchTermsAutoSuggestionLinkVerification_Variant3()
        {
#line 61
this.MisspeltSearchTermsAutoSuggestionLinkVerification("Search results", "astronautt", "astronaut", ((string[])(null)));
#line hidden
        }
        
        public virtual void EmptySearchFields(string page, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("page", page);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Empty search fields", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 76
 testRunner.Given(string.Format("I navigate to the {0} page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 77
 testRunner.And("the search field is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.When("I click the search button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
 testRunner.Then("the page does not advance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Empty search fields: Explore careers")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Empty search fields: Explore careers")]
        public virtual void EmptySearchFields_ExploreCareers()
        {
#line 75
this.EmptySearchFields("Explore careers", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Empty search fields: Search results")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Empty search fields: Search results")]
        public virtual void EmptySearchFields_SearchResults()
        {
#line 75
this.EmptySearchFields("Search results", ((string[])(null)));
#line hidden
        }
        
        public virtual void ReconcilingSearchResultsCountWithNumberOfPagesReturned(string page, string searchTerm, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("page", page);
            argumentsOfScenario.Add("search term", searchTerm);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reconciling search results count with number of pages returned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 86
 testRunner.Given(string.Format("I navigate to the {0} page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 87
 testRunner.And(string.Format("I enter the search term {0} in the search field", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.And("I click the search button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.And("I retrieve the number of search results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.When("I work out the number of result pages from the number of search result returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 91
 testRunner.Then("the number of search results returned is commensurate with the number of search r" +
                        "esult pages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
 testRunner.And("the Next button is no longer present on the final page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reconciling search results count with number of pages returned: Explore careers")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Reconciling search results count with number of pages returned: Explore careers")]
        public virtual void ReconcilingSearchResultsCountWithNumberOfPagesReturned_ExploreCareers()
        {
#line 85
this.ReconcilingSearchResultsCountWithNumberOfPagesReturned("Explore careers", "nurse", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reconciling search results count with number of pages returned: Job profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Reconciling search results count with number of pages returned: Job profiles")]
        public virtual void ReconcilingSearchResultsCountWithNumberOfPagesReturned_JobProfiles()
        {
#line 85
this.ReconcilingSearchResultsCountWithNumberOfPagesReturned("Job profiles", "lawyer", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reconciling search results count with number of pages returned: Search results")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Reconciling search results count with number of pages returned: Search results")]
        public virtual void ReconcilingSearchResultsCountWithNumberOfPagesReturned_SearchResults()
        {
#line 85
this.ReconcilingSearchResultsCountWithNumberOfPagesReturned("Search results", "phlebotomist", ((string[])(null)));
#line hidden
        }
        
        public virtual void SearchResultsOnPressingTheEnterButton(string page, string searchTerm, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("page", page);
            argumentsOfScenario.Add("search term", searchTerm);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search results on pressing the enter button", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 99
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 100
 testRunner.Given(string.Format("I navigate to the {0} page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 101
 testRunner.And(string.Format("I enter the search term {0} in the search field", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
 testRunner.When("I press the Enter button instead of clicking search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 103
 testRunner.Then("the search results screen is displayed.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search results on pressing the enter button: Explore careers")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search results on pressing the enter button: Explore careers")]
        public virtual void SearchResultsOnPressingTheEnterButton_ExploreCareers()
        {
#line 99
this.SearchResultsOnPressingTheEnterButton("Explore careers", "nurse", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search results on pressing the enter button: Job profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search results on pressing the enter button: Job profiles")]
        public virtual void SearchResultsOnPressingTheEnterButton_JobProfiles()
        {
#line 99
this.SearchResultsOnPressingTheEnterButton("Job profiles", "lawyer", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search results on pressing the enter button: Search results")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search results on pressing the enter button: Search results")]
        public virtual void SearchResultsOnPressingTheEnterButton_SearchResults()
        {
#line 99
this.SearchResultsOnPressingTheEnterButton("Search results", "phlebotomist", ((string[])(null)));
#line hidden
        }
        
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection(string jobCategory, string linkToTest, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Job category", jobCategory);
            argumentsOfScenario.Add("Link to test", linkToTest);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Links verifications for Other job categories side section", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 111
 testRunner.Given(string.Format("I am at the \"Job categories\" web page for {0}", jobCategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 112
 testRunner.When(string.Format("I click on the {0} link", linkToTest), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 113
 testRunner.Then(string.Format("I am taken to the {0} page", linkToTest), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Administration")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Administration")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_Administration()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Administration", "Travel and tourism", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Animal care")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Animal care")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_AnimalCare()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Animal care", "Transport", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Beauty and wellbeing")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Beauty and wellbeing")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_BeautyAndWellbeing()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Beauty and wellbeing", "Teaching and education", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Business and finance")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Business and finance")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_BusinessAndFinance()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Business and finance", "Sports and leisure", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Computing, technology " +
            "and digital")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Computing, technology " +
            "and digital")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_ComputingTechnologyAndDigital()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Computing, technology and digital", "Social care", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Construction and trade" +
            "s")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Construction and trade" +
            "s")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_ConstructionAndTrades()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Construction and trades", "Science and research", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Creative and media")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Creative and media")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_CreativeAndMedia()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Creative and media", "Retail and sales", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Delivery and storage")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Delivery and storage")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_DeliveryAndStorage()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Delivery and storage", "Manufacturing", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Emergency and uniform " +
            "services")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Emergency and uniform " +
            "services")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_EmergencyAndUniformServices()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Emergency and uniform services", "Managerial", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Engineering and mainte" +
            "nance")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Engineering and mainte" +
            "nance")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_EngineeringAndMaintenance()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Engineering and maintenance", "Law and legal", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Environment and land")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Environment and land")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_EnvironmentAndLand()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Environment and land", "Hospitality and food", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Government services")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Government services")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_GovernmentServices()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Government services", "Home services", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Healthcare")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Healthcare")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_Healthcare()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Healthcare", "Government services", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Home services")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Home services")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_HomeServices()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Home services", "Healthcare", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Hospitality and food")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Hospitality and food")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_HospitalityAndFood()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Hospitality and food", "Environment and land", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Law and legal")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Law and legal")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_LawAndLegal()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Law and legal", "Engineering and maintenance", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Managerial")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Managerial")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_Managerial()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Managerial", "Emergency and uniform services", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Manufacturing")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Manufacturing")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_Manufacturing()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Manufacturing", "Delivery and storage", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Retail and sales")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Retail and sales")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_RetailAndSales()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Retail and sales", "Creative and media", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Science and research")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Science and research")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_ScienceAndResearch()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Science and research", "Construction and trades", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Social care")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Social care")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_SocialCare()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Social care", "Computing, technology and digital", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Sports and leisure")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Sports and leisure")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_SportsAndLeisure()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Sports and leisure", "Business and finance", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Teaching and education" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Teaching and education" +
            "")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_TeachingAndEducation()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Teaching and education", "Beauty and wellbeing", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Transport")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Transport")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_Transport()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Transport", "Animal care", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Travel and tourism")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Travel and tourism")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_TravelAndTourism()
        {
#line 110
this.LinksVerificationsForOtherJobCategoriesSideSection("Travel and tourism", "Administration", ((string[])(null)));
#line hidden
        }
        
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection(string jobCategory, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Job category", jobCategory);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unqualified link verification for Other job categories side section", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 142
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 143
 testRunner.Given(string.Format("I am at the \"Job categories\" web page for {0}", jobCategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 144
 testRunner.Then(string.Format("the {0} link is not present in amongst the links beneath the Other job categories" +
                            " side section", jobCategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unqualified link verification for Other job categories side section: Beauty and w" +
            "ellbeing")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Unqualified link verification for Other job categories side section: Beauty and w" +
            "ellbeing")]
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection_BeautyAndWellbeing()
        {
#line 142
this.UnqualifiedLinkVerificationForOtherJobCategoriesSideSection("Beauty and wellbeing", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unqualified link verification for Other job categories side section: Construction" +
            " and trades")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Unqualified link verification for Other job categories side section: Construction" +
            " and trades")]
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection_ConstructionAndTrades()
        {
#line 142
this.UnqualifiedLinkVerificationForOtherJobCategoriesSideSection("Construction and trades", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unqualified link verification for Other job categories side section: Creative and" +
            " media")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Unqualified link verification for Other job categories side section: Creative and" +
            " media")]
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection_CreativeAndMedia()
        {
#line 142
this.UnqualifiedLinkVerificationForOtherJobCategoriesSideSection("Creative and media", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unqualified link verification for Other job categories side section: Delivery and" +
            " storage")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Unqualified link verification for Other job categories side section: Delivery and" +
            " storage")]
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection_DeliveryAndStorage()
        {
#line 142
this.UnqualifiedLinkVerificationForOtherJobCategoriesSideSection("Delivery and storage", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unqualified link verification for Other job categories side section: Engineering " +
            "and maintenance")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Unqualified link verification for Other job categories side section: Engineering " +
            "and maintenance")]
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection_EngineeringAndMaintenance()
        {
#line 142
this.UnqualifiedLinkVerificationForOtherJobCategoriesSideSection("Engineering and maintenance", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unqualified link verification for Other job categories side section: Environment " +
            "and land")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Unqualified link verification for Other job categories side section: Environment " +
            "and land")]
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection_EnvironmentAndLand()
        {
#line 142
this.UnqualifiedLinkVerificationForOtherJobCategoriesSideSection("Environment and land", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unqualified link verification for Other job categories side section: Government s" +
            "ervices")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Unqualified link verification for Other job categories side section: Government s" +
            "ervices")]
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection_GovernmentServices()
        {
#line 142
this.UnqualifiedLinkVerificationForOtherJobCategoriesSideSection("Government services", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unqualified link verification for Other job categories side section: Healthcare")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Unqualified link verification for Other job categories side section: Healthcare")]
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection_Healthcare()
        {
#line 142
this.UnqualifiedLinkVerificationForOtherJobCategoriesSideSection("Healthcare", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job category list")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job category list")]
        public virtual void VerifyJobCategoryList()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Job category list", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 156
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 157
testRunner.Given("I am at the \"Explore careers\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Job category"});
                table1.AddRow(new string[] {
                            "Administration"});
                table1.AddRow(new string[] {
                            "Animal care"});
                table1.AddRow(new string[] {
                            "Beauty and wellbeing"});
                table1.AddRow(new string[] {
                            "Business and finance"});
                table1.AddRow(new string[] {
                            "Computing, technology and digital"});
                table1.AddRow(new string[] {
                            "Construction and trades"});
                table1.AddRow(new string[] {
                            "Creative and media"});
                table1.AddRow(new string[] {
                            "Delivery and storage"});
                table1.AddRow(new string[] {
                            "Emergency and uniform services"});
                table1.AddRow(new string[] {
                            "Engineering and maintenance"});
                table1.AddRow(new string[] {
                            "Environment and land"});
                table1.AddRow(new string[] {
                            "Government services"});
                table1.AddRow(new string[] {
                            "Healthcare"});
                table1.AddRow(new string[] {
                            "Home services"});
                table1.AddRow(new string[] {
                            "Hospitality and food"});
                table1.AddRow(new string[] {
                            "Law and legal"});
                table1.AddRow(new string[] {
                            "Managerial"});
                table1.AddRow(new string[] {
                            "Manufacturing"});
                table1.AddRow(new string[] {
                            "Retail and sales"});
                table1.AddRow(new string[] {
                            "Science and research"});
                table1.AddRow(new string[] {
                            "Social care"});
                table1.AddRow(new string[] {
                            "Sports and leisure"});
                table1.AddRow(new string[] {
                            "Teaching and education"});
                table1.AddRow(new string[] {
                            "Transport"});
                table1.AddRow(new string[] {
                            "Travel and tourism"});
#line 158
testRunner.And("I check the list displayed below against the list of Job categories displayed on " +
                        "that page", ((string)(null)), table1, "And ");
#line hidden
#line 185
testRunner.Then("both lists are the same", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void VerifyJobProfilesDistinctCount(string jobCategory, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Job category", jobCategory);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Job profiles distinct count", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 187
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 188
 testRunner.Given(string.Format("I am at the \"Job categories\" web page for {0}", jobCategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 189
 testRunner.When("I check the job profiles list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 190
 testRunner.Then("none of the job profiles occur more than once", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Administration")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Administration")]
        public virtual void VerifyJobProfilesDistinctCount_Administration()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Administration", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Animal care")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Animal care")]
        public virtual void VerifyJobProfilesDistinctCount_AnimalCare()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Animal care", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Beauty and wellbeing")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Beauty and wellbeing")]
        public virtual void VerifyJobProfilesDistinctCount_BeautyAndWellbeing()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Beauty and wellbeing", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Business and finance")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Business and finance")]
        public virtual void VerifyJobProfilesDistinctCount_BusinessAndFinance()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Business and finance", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Computing, technology and digital")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Computing, technology and digital")]
        public virtual void VerifyJobProfilesDistinctCount_ComputingTechnologyAndDigital()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Computing, technology and digital", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Construction and trades")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Construction and trades")]
        public virtual void VerifyJobProfilesDistinctCount_ConstructionAndTrades()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Construction and trades", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Creative and media")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Creative and media")]
        public virtual void VerifyJobProfilesDistinctCount_CreativeAndMedia()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Creative and media", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Delivery and storage")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Delivery and storage")]
        public virtual void VerifyJobProfilesDistinctCount_DeliveryAndStorage()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Delivery and storage", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Emergency and uniform services")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Emergency and uniform services")]
        public virtual void VerifyJobProfilesDistinctCount_EmergencyAndUniformServices()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Emergency and uniform services", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Engineering and maintenance")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Engineering and maintenance")]
        public virtual void VerifyJobProfilesDistinctCount_EngineeringAndMaintenance()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Engineering and maintenance", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Environment and land")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Environment and land")]
        public virtual void VerifyJobProfilesDistinctCount_EnvironmentAndLand()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Environment and land", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Government services")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Government services")]
        public virtual void VerifyJobProfilesDistinctCount_GovernmentServices()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Government services", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Healthcare")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Healthcare")]
        public virtual void VerifyJobProfilesDistinctCount_Healthcare()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Healthcare", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Home services")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Home services")]
        public virtual void VerifyJobProfilesDistinctCount_HomeServices()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Home services", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Hospitality and food")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Hospitality and food")]
        public virtual void VerifyJobProfilesDistinctCount_HospitalityAndFood()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Hospitality and food", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Law and legal")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Law and legal")]
        public virtual void VerifyJobProfilesDistinctCount_LawAndLegal()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Law and legal", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Managerial")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Managerial")]
        public virtual void VerifyJobProfilesDistinctCount_Managerial()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Managerial", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Manufacturing")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Manufacturing")]
        public virtual void VerifyJobProfilesDistinctCount_Manufacturing()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Manufacturing", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Retail and sales")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Retail and sales")]
        public virtual void VerifyJobProfilesDistinctCount_RetailAndSales()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Retail and sales", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Science and research")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Science and research")]
        public virtual void VerifyJobProfilesDistinctCount_ScienceAndResearch()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Science and research", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Social care")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Social care")]
        public virtual void VerifyJobProfilesDistinctCount_SocialCare()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Social care", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Sports and leisure")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Sports and leisure")]
        public virtual void VerifyJobProfilesDistinctCount_SportsAndLeisure()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Sports and leisure", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Teaching and education")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Teaching and education")]
        public virtual void VerifyJobProfilesDistinctCount_TeachingAndEducation()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Teaching and education", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Transport")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Transport")]
        public virtual void VerifyJobProfilesDistinctCount_Transport()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Transport", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job profiles distinct count: Travel and tourism")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job profiles distinct count: Travel and tourism")]
        public virtual void VerifyJobProfilesDistinctCount_TravelAndTourism()
        {
#line 187
this.VerifyJobProfilesDistinctCount("Travel and tourism", ((string[])(null)));
#line hidden
        }
        
        public virtual void JobProfilesLinksVerification(string jobCategory, string linkPosition, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Job category", jobCategory);
            argumentsOfScenario.Add("Link position", linkPosition);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Job profiles links verification", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 219
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 220
 testRunner.Given(string.Format("I am at the \"Job categories\" web page for {0}", jobCategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 221
 testRunner.When(string.Format("I click the link for the {0} Job profile under that Job category", linkPosition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 222
 testRunner.Then("I am taken profile details page for that Job profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job profiles links verification: Administration")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job profiles links verification: Administration")]
        public virtual void JobProfilesLinksVerification_Administration()
        {
#line 219
this.JobProfilesLinksVerification("Administration", "first", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job profiles links verification: Animal care")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job profiles links verification: Animal care")]
        public virtual void JobProfilesLinksVerification_AnimalCare()
        {
#line 219
this.JobProfilesLinksVerification("Animal care", "second", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job profiles links verification: Beauty and wellbeing")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job profiles links verification: Beauty and wellbeing")]
        public virtual void JobProfilesLinksVerification_BeautyAndWellbeing()
        {
#line 219
this.JobProfilesLinksVerification("Beauty and wellbeing", "third", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job profiles links verification: Business and finance")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job profiles links verification: Business and finance")]
        public virtual void JobProfilesLinksVerification_BusinessAndFinance()
        {
#line 219
this.JobProfilesLinksVerification("Business and finance", "fourth", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job profiles links verification: Computing, technology and digital")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job profiles links verification: Computing, technology and digital")]
        public virtual void JobProfilesLinksVerification_ComputingTechnologyAndDigital()
        {
#line 219
this.JobProfilesLinksVerification("Computing, technology and digital", "fifth", ((string[])(null)));
#line hidden
        }
        
        public virtual void AlphabeticalOrdering(string page, string jobCategory, string listToExamine, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Page", page);
            argumentsOfScenario.Add("Job category", jobCategory);
            argumentsOfScenario.Add("List to examine", listToExamine);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Alphabetical ordering", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 231
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 232
 testRunner.Given(string.Format("I navigate to the {0} page for {1}", page, jobCategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 233
 testRunner.When(string.Format("I examine the {0} list", listToExamine), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 234
 testRunner.Then("the list is in alphabetical order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Alphabetical ordering: Variant 0")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Alphabetical ordering: Variant 0")]
        public virtual void AlphabeticalOrdering_Variant0()
        {
#line 231
this.AlphabeticalOrdering("Explore careers", "", "Job categories", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Alphabetical ordering: Variant 1")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Alphabetical ordering: Variant 1")]
        public virtual void AlphabeticalOrdering_Variant1()
        {
#line 231
this.AlphabeticalOrdering("Job categories", "Administration", "Other job categories", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Alphabetical ordering: Variant 2")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Alphabetical ordering: Variant 2")]
        public virtual void AlphabeticalOrdering_Variant2()
        {
#line 231
this.AlphabeticalOrdering("Job categories", "Administration", "Job profiles", ((string[])(null)));
#line hidden
        }
        
        public virtual void NonPaginationVerificationForJobCategoriesAdministrationPage(string page, string jobCategory, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Page", page);
            argumentsOfScenario.Add("Job category", jobCategory);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Non pagination verification for Job categories Administration page", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 241
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 242
 testRunner.Given(string.Format("I navigate to the {0} page for {1}", page, jobCategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 243
 testRunner.When("I examine the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 244
 testRunner.Then("the page contains no pagination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Non pagination verification for Job categories Administration page: Job categorie" +
            "s")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Non pagination verification for Job categories Administration page: Job categorie" +
            "s")]
        public virtual void NonPaginationVerificationForJobCategoriesAdministrationPage_JobCategories()
        {
#line 241
this.NonPaginationVerificationForJobCategoriesAdministrationPage("Job categories", "Administration", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Placeholder text verification for search field")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Placeholder text verification for search field")]
        public virtual void PlaceholderTextVerificationForSearchField()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Placeholder text verification for search field", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 249
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 250
 testRunner.Given("I navigate to the web page \"Search results\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 251
 testRunner.Then("the search results field placeholder text is \"Enter a job title\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void NumberOfResultsFoundVerification(string page, string searchTerm, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("page", page);
            argumentsOfScenario.Add("search term", searchTerm);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Number of results found verification", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 253
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 254
 testRunner.Given(string.Format("I navigate to the {0} page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 255
 testRunner.And(string.Format("I enter the search term {0} in the search field", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 256
 testRunner.When("I click the search button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 257
 testRunner.Then("the number of results stated as found is the equal to the actual number of Job pr" +
                        "ofiles listed thereunder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Number of results found verification: Variant 0")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Number of results found verification: Variant 0")]
        public virtual void NumberOfResultsFoundVerification_Variant0()
        {
#line 253
this.NumberOfResultsFoundVerification("Explore careers", "Aircraft pilot", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Number of results found verification: Variant 1")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Number of results found verification: Variant 1")]
        public virtual void NumberOfResultsFoundVerification_Variant1()
        {
#line 253
this.NumberOfResultsFoundVerification("Search results", "Nurse", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Number of results found verification: Variant 2")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Number of results found verification: Variant 2")]
        public virtual void NumberOfResultsFoundVerification_Variant2()
        {
#line 253
this.NumberOfResultsFoundVerification("Explore careers", "Carpenter", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Number of results found verification: Variant 3")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Number of results found verification: Variant 3")]
        public virtual void NumberOfResultsFoundVerification_Variant3()
        {
#line 253
this.NumberOfResultsFoundVerification("Search results", "Cartographer", ((string[])(null)));
#line hidden
        }
        
        public virtual void BreadcrumbLinkingVerification(string page, string jobCategory, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Page", page);
            argumentsOfScenario.Add("Job category", jobCategory);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Breadcrumb linking verification", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 265
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 266
 testRunner.Given(string.Format("I navigate to the {0} page for {1}", page, jobCategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 267
 testRunner.When("I click the Explore careers breadcrumb", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 268
 testRunner.Then("I am on the \"Explore careers\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Breadcrumb linking verification: Job categories")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Breadcrumb linking verification: Job categories")]
        public virtual void BreadcrumbLinkingVerification_JobCategories()
        {
#line 265
this.BreadcrumbLinkingVerification("Job categories", "Administration", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Breadcrumb linking verification: Search results")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Breadcrumb linking verification: Search results")]
        public virtual void BreadcrumbLinkingVerification_SearchResults()
        {
#line 265
this.BreadcrumbLinkingVerification("Search results", "", ((string[])(null)));
#line hidden
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ExploreCareersCUIFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ExploreCareersCUIFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
