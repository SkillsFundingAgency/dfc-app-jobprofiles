// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DFC.App.ExploreCareers.UI.FunctionalTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ExploreCareersCUIFeature : object, Xunit.IClassFixture<ExploreCareersCUIFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ExploreCareersCUI.feature"
#line hidden
        
        public ExploreCareersCUIFeature(ExploreCareersCUIFeature.FixtureData fixtureData, DFC_App_ExploreCareers_UI_FunctionalTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "Features", "ExploreCareersCUI", "\tAs a citizen on the National Careers website \r\n\tI want to view and search job pr" +
                    "ofiles information for a particular job category", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        public virtual void JobCategoryLinksVerification(string jobCategory, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Job category", jobCategory);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Job category links verification", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("I am at the \"Explore careers\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When(string.Format("I click on the {0} link", jobCategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then(string.Format("I am taken to the {0} page", jobCategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Administration")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Administration")]
        public virtual void JobCategoryLinksVerification_Administration()
        {
#line 5
this.JobCategoryLinksVerification("Administration", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Animal care")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Animal care")]
        public virtual void JobCategoryLinksVerification_AnimalCare()
        {
#line 5
this.JobCategoryLinksVerification("Animal care", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Business and finance")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Business and finance")]
        public virtual void JobCategoryLinksVerification_BusinessAndFinance()
        {
#line 5
this.JobCategoryLinksVerification("Business and finance", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Computing, technology and digital")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Computing, technology and digital")]
        public virtual void JobCategoryLinksVerification_ComputingTechnologyAndDigital()
        {
#line 5
this.JobCategoryLinksVerification("Computing, technology and digital", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Emergency and uniform services")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Emergency and uniform services")]
        public virtual void JobCategoryLinksVerification_EmergencyAndUniformServices()
        {
#line 5
this.JobCategoryLinksVerification("Emergency and uniform services", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Law and legal")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Law and legal")]
        public virtual void JobCategoryLinksVerification_LawAndLegal()
        {
#line 5
this.JobCategoryLinksVerification("Law and legal", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Manufacturing")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Manufacturing")]
        public virtual void JobCategoryLinksVerification_Manufacturing()
        {
#line 5
this.JobCategoryLinksVerification("Manufacturing", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Science and research")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Science and research")]
        public virtual void JobCategoryLinksVerification_ScienceAndResearch()
        {
#line 5
this.JobCategoryLinksVerification("Science and research", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Job category links verification: Transport")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Job category links verification: Transport")]
        public virtual void JobCategoryLinksVerification_Transport()
        {
#line 5
this.JobCategoryLinksVerification("Transport", ((string[])(null)));
#line hidden
        }
        
        public virtual void SearchFieldAutosuggestFieldPopulation(string page, string searchTerm, string autoSuggestOption, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("page", page);
            argumentsOfScenario.Add("search term", searchTerm);
            argumentsOfScenario.Add("auto suggest option", autoSuggestOption);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search field autosuggest field population", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
 testRunner.Given(string.Format("I navigate to the {0} page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
 testRunner.When(string.Format("I enter the search term {0} in the search field", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
 testRunner.Then(string.Format("I am able to select {0} from the resultant auto suggest", autoSuggestOption), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.And(string.Format("{0} is populated in the search field", autoSuggestOption), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 0")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 0")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant0()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Explore careers", "nur", "Nursing associate", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 1")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 1")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant1()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Explore careers", "pi", "Aircraft pilot", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 2")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 2")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant2()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Explore careers", "la", "Lawyer", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 3")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 3")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant3()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Job profiles", "nur", "Nursing associate", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 4")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 4")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant4()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Job profiles", "pi", "Aircraft pilot", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 5")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 5")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant5()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Job profiles", "la", "Lawyer", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 6")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 6")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant6()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Search results", "nur", "Nursing associate", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 7")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 7")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant7()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Search results", "pi", "Aircraft pilot", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search field autosuggest field population: Variant 8")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search field autosuggest field population: Variant 8")]
        public virtual void SearchFieldAutosuggestFieldPopulation_Variant8()
        {
#line 21
this.SearchFieldAutosuggestFieldPopulation("Search results", "la", "Lawyer", ((string[])(null)));
#line hidden
        }
        
        public virtual void SearchTermNotFound(string page, string searchTerm, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("page", page);
            argumentsOfScenario.Add("search term", searchTerm);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search term not found", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 39
 testRunner.Given(string.Format("I navigate to the {0} page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
 testRunner.When(string.Format("I enter the non existent search term {0} in the search field", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
 testRunner.And("I click the search button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.Then("I get the message \"0 results found - try again using a different job title\" in th" +
                        "e search results page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search term not found: Explore careers")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search term not found: Explore careers")]
        public virtual void SearchTermNotFound_ExploreCareers()
        {
#line 38
this.SearchTermNotFound("Explore careers", "aaa", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search term not found: Job profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search term not found: Job profiles")]
        public virtual void SearchTermNotFound_JobProfiles()
        {
#line 38
this.SearchTermNotFound("Job profiles", "sss", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search term not found: Search results")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search term not found: Search results")]
        public virtual void SearchTermNotFound_SearchResults()
        {
#line 38
this.SearchTermNotFound("Search results", "zzz", ((string[])(null)));
#line hidden
        }
        
        public virtual void AutoSuggestingSearchTermsOnSearchTermMisspelling(string page, string searchTerm, string suggestedSearchTerm, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("page", page);
            argumentsOfScenario.Add("search term", searchTerm);
            argumentsOfScenario.Add("suggested search term", suggestedSearchTerm);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Auto suggesting search terms on search term misspelling", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 51
 testRunner.Given(string.Format("I navigate to the {0} page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 52
 testRunner.When(string.Format("I enter the search term {0} in the search field", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.And("I click the search button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.Then(string.Format("I am taken to the search results page with the message Did you mean {0} displayed" +
                            "", suggestedSearchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
 testRunner.And("the message \"0 results found - try again using a different job title\" displayed b" +
                        "elow it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Auto suggesting search terms on search term misspelling: Explore careers")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Auto suggesting search terms on search term misspelling: Explore careers")]
        public virtual void AutoSuggestingSearchTermsOnSearchTermMisspelling_ExploreCareers()
        {
#line 50
this.AutoSuggestingSearchTermsOnSearchTermMisspelling("Explore careers", "nuurse", "nurse", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Auto suggesting search terms on search term misspelling: Job profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Auto suggesting search terms on search term misspelling: Job profiles")]
        public virtual void AutoSuggestingSearchTermsOnSearchTermMisspelling_JobProfiles()
        {
#line 50
this.AutoSuggestingSearchTermsOnSearchTermMisspelling("Job profiles", "lawwwyer", "lawyer", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Auto suggesting search terms on search term misspelling: Search results")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Auto suggesting search terms on search term misspelling: Search results")]
        public virtual void AutoSuggestingSearchTermsOnSearchTermMisspelling_SearchResults()
        {
#line 50
this.AutoSuggestingSearchTermsOnSearchTermMisspelling("Search results", "phlebotomizzzt", "phlebotomist", ((string[])(null)));
#line hidden
        }
        
        public virtual void EmptySearchFields(string page, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("page", page);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Empty search fields", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
 testRunner.Given(string.Format("I navigate to the {0} page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
 testRunner.And("the search field is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
 testRunner.When("I click the search button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.Then("the page does not advance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Empty search fields: Explore careers")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Empty search fields: Explore careers")]
        public virtual void EmptySearchFields_ExploreCareers()
        {
#line 63
this.EmptySearchFields("Explore careers", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Empty search fields: Search results")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Empty search fields: Search results")]
        public virtual void EmptySearchFields_SearchResults()
        {
#line 63
this.EmptySearchFields("Search results", ((string[])(null)));
#line hidden
        }
        
        public virtual void ReconcilingSearchResultsWithPagesReturned(string page, string searchTerm, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("page", page);
            argumentsOfScenario.Add("search term", searchTerm);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reconciling search results with pages returned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 75
 testRunner.Given(string.Format("I navigate to the {0} page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 76
 testRunner.And(string.Format("I enter the search term {0} in the search field", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.When("I click the search button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
 testRunner.Then("the number of search results returned is commensurate with the number of search r" +
                        "esult pages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reconciling search results with pages returned: Explore careers")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Reconciling search results with pages returned: Explore careers")]
        public virtual void ReconcilingSearchResultsWithPagesReturned_ExploreCareers()
        {
#line 74
this.ReconcilingSearchResultsWithPagesReturned("Explore careers", "nurse", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reconciling search results with pages returned: Job profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Reconciling search results with pages returned: Job profiles")]
        public virtual void ReconcilingSearchResultsWithPagesReturned_JobProfiles()
        {
#line 74
this.ReconcilingSearchResultsWithPagesReturned("Job profiles", "lawyer", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reconciling search results with pages returned: Search results")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Reconciling search results with pages returned: Search results")]
        public virtual void ReconcilingSearchResultsWithPagesReturned_SearchResults()
        {
#line 74
this.ReconcilingSearchResultsWithPagesReturned("Search results", "phlebotomist", ((string[])(null)));
#line hidden
        }
        
        public virtual void SearchResultsOnPressingTheEnterButton(string page, string searchTerm, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("page", page);
            argumentsOfScenario.Add("search term", searchTerm);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search results on pressing the enter button", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 87
 testRunner.Given(string.Format("I navigate to the {0} page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 88
 testRunner.And(string.Format("I enter the search term {0} in the search field", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.When("I press the Enter button instead of clicking search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
 testRunner.Then("the search results screen is displayed.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search results on pressing the enter button: Explore careers")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search results on pressing the enter button: Explore careers")]
        public virtual void SearchResultsOnPressingTheEnterButton_ExploreCareers()
        {
#line 86
this.SearchResultsOnPressingTheEnterButton("Explore careers", "nurse", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search results on pressing the enter button: Job profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search results on pressing the enter button: Job profiles")]
        public virtual void SearchResultsOnPressingTheEnterButton_JobProfiles()
        {
#line 86
this.SearchResultsOnPressingTheEnterButton("Job profiles", "lawyer", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search results on pressing the enter button: Search results")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Search results on pressing the enter button: Search results")]
        public virtual void SearchResultsOnPressingTheEnterButton_SearchResults()
        {
#line 86
this.SearchResultsOnPressingTheEnterButton("Search results", "phlebotomist", ((string[])(null)));
#line hidden
        }
        
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection(string jobCategory, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Job category", jobCategory);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Links verifications for Other job categories side section", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 98
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 99
 testRunner.Given("I am at the \"Job categories\" Administration web page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 100
 testRunner.When(string.Format("I click on the {0} link", jobCategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 101
 testRunner.Then(string.Format("I am taken to the {0} page", jobCategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Beauty and wellbeing")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Beauty and wellbeing")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_BeautyAndWellbeing()
        {
#line 98
this.LinksVerificationsForOtherJobCategoriesSideSection("Beauty and wellbeing", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Construction and trade" +
            "s")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Construction and trade" +
            "s")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_ConstructionAndTrades()
        {
#line 98
this.LinksVerificationsForOtherJobCategoriesSideSection("Construction and trades", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Creative and media")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Creative and media")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_CreativeAndMedia()
        {
#line 98
this.LinksVerificationsForOtherJobCategoriesSideSection("Creative and media", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Delivery and storage")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Delivery and storage")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_DeliveryAndStorage()
        {
#line 98
this.LinksVerificationsForOtherJobCategoriesSideSection("Delivery and storage", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Engineering and mainte" +
            "nance")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Engineering and mainte" +
            "nance")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_EngineeringAndMaintenance()
        {
#line 98
this.LinksVerificationsForOtherJobCategoriesSideSection("Engineering and maintenance", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Environment and land")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Environment and land")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_EnvironmentAndLand()
        {
#line 98
this.LinksVerificationsForOtherJobCategoriesSideSection("Environment and land", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Government services")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Government services")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_GovernmentServices()
        {
#line 98
this.LinksVerificationsForOtherJobCategoriesSideSection("Government services", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Links verifications for Other job categories side section: Healthcare")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Links verifications for Other job categories side section: Healthcare")]
        public virtual void LinksVerificationsForOtherJobCategoriesSideSection_Healthcare()
        {
#line 98
this.LinksVerificationsForOtherJobCategoriesSideSection("Healthcare", ((string[])(null)));
#line hidden
        }
        
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection(string jobCategory, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Job category", jobCategory);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unqualified link verification for Other job categories side section", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 114
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 115
 testRunner.Given(string.Format("I am at the \"Job categories\" web page for {0}", jobCategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 116
 testRunner.Then(string.Format("the {0} link is not present in amongst the links beneath the Other job categories" +
                            " side section", jobCategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unqualified link verification for Other job categories side section: Beauty and w" +
            "ellbeing")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Unqualified link verification for Other job categories side section: Beauty and w" +
            "ellbeing")]
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection_BeautyAndWellbeing()
        {
#line 114
this.UnqualifiedLinkVerificationForOtherJobCategoriesSideSection("Beauty and wellbeing", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unqualified link verification for Other job categories side section: Construction" +
            " and trades")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Unqualified link verification for Other job categories side section: Construction" +
            " and trades")]
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection_ConstructionAndTrades()
        {
#line 114
this.UnqualifiedLinkVerificationForOtherJobCategoriesSideSection("Construction and trades", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unqualified link verification for Other job categories side section: Creative and" +
            " media")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Unqualified link verification for Other job categories side section: Creative and" +
            " media")]
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection_CreativeAndMedia()
        {
#line 114
this.UnqualifiedLinkVerificationForOtherJobCategoriesSideSection("Creative and media", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unqualified link verification for Other job categories side section: Delivery and" +
            " storage")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Unqualified link verification for Other job categories side section: Delivery and" +
            " storage")]
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection_DeliveryAndStorage()
        {
#line 114
this.UnqualifiedLinkVerificationForOtherJobCategoriesSideSection("Delivery and storage", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unqualified link verification for Other job categories side section: Engineering " +
            "and maintenance")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Unqualified link verification for Other job categories side section: Engineering " +
            "and maintenance")]
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection_EngineeringAndMaintenance()
        {
#line 114
this.UnqualifiedLinkVerificationForOtherJobCategoriesSideSection("Engineering and maintenance", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unqualified link verification for Other job categories side section: Environment " +
            "and land")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Unqualified link verification for Other job categories side section: Environment " +
            "and land")]
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection_EnvironmentAndLand()
        {
#line 114
this.UnqualifiedLinkVerificationForOtherJobCategoriesSideSection("Environment and land", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unqualified link verification for Other job categories side section: Government s" +
            "ervices")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Unqualified link verification for Other job categories side section: Government s" +
            "ervices")]
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection_GovernmentServices()
        {
#line 114
this.UnqualifiedLinkVerificationForOtherJobCategoriesSideSection("Government services", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unqualified link verification for Other job categories side section: Healthcare")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Unqualified link verification for Other job categories side section: Healthcare")]
        public virtual void UnqualifiedLinkVerificationForOtherJobCategoriesSideSection_Healthcare()
        {
#line 114
this.UnqualifiedLinkVerificationForOtherJobCategoriesSideSection("Healthcare", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Job category list")]
        [Xunit.TraitAttribute("FeatureTitle", "ExploreCareersCUI")]
        [Xunit.TraitAttribute("Description", "Verify Job category list")]
        public virtual void VerifyJobCategoryList()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Job category list", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 129
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 130
testRunner.Given("I am at the \"Explore careers\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Job category"});
                table1.AddRow(new string[] {
                            "Administration"});
                table1.AddRow(new string[] {
                            "Animal care"});
                table1.AddRow(new string[] {
                            "Beauty and wellbeing"});
                table1.AddRow(new string[] {
                            "Business and finance"});
                table1.AddRow(new string[] {
                            "Computing, technology and digital"});
                table1.AddRow(new string[] {
                            "Construction and trades"});
                table1.AddRow(new string[] {
                            "Creative and media"});
                table1.AddRow(new string[] {
                            "Delivery and storage"});
                table1.AddRow(new string[] {
                            "Emergency and uniform services"});
                table1.AddRow(new string[] {
                            "Engineering and maintenance"});
                table1.AddRow(new string[] {
                            "Environment and land"});
                table1.AddRow(new string[] {
                            "Government services"});
                table1.AddRow(new string[] {
                            "Healthcare"});
                table1.AddRow(new string[] {
                            "Home services"});
                table1.AddRow(new string[] {
                            "Hospitality and food"});
                table1.AddRow(new string[] {
                            "Law and legal"});
                table1.AddRow(new string[] {
                            "Managerial"});
                table1.AddRow(new string[] {
                            "Manufacturing"});
                table1.AddRow(new string[] {
                            "Retail and sales"});
                table1.AddRow(new string[] {
                            "Science and research"});
                table1.AddRow(new string[] {
                            "Social care"});
                table1.AddRow(new string[] {
                            "Sports and leisure"});
                table1.AddRow(new string[] {
                            "Teaching and education"});
                table1.AddRow(new string[] {
                            "Transport"});
                table1.AddRow(new string[] {
                            "Travel and tourism"});
#line 131
testRunner.And("I check the list displayed below against the list of Job categories displayed on " +
                        "the page", ((string)(null)), table1, "And ");
#line hidden
#line 158
testRunner.Then("both lists are the same", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ExploreCareersCUIFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ExploreCareersCUIFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
